{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Nicolas/Desktop/UNIVERSIDAD/Proyectos Personales/ingeniero-eduard/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"C:/Users/Nicolas/Desktop/UNIVERSIDAD/Proyectos Personales/ingeniero-eduard/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/Nicolas/Desktop/UNIVERSIDAD/Proyectos Personales/ingeniero-eduard/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"autoplay\", \"delay\", \"driver\", \"keyframes\", \"type\", \"repeat\", \"repeatDelay\", \"repeatType\", \"onPlay\", \"onStop\", \"onComplete\", \"onUpdate\"];\nimport { keyframes } from '../generators/keyframes.mjs';\nimport { spring } from '../generators/spring/index.mjs';\nimport { inertia } from '../generators/inertia.mjs';\nimport { frameloopDriver } from './driver-frameloop.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nvar types = {\n  decay: inertia,\n  inertia: inertia,\n  tween: keyframes,\n  keyframes: keyframes,\n  spring: spring\n};\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nvar maxDuration = 20000;\nfunction calculateDuration(generator) {\n  var duration = 0;\n  var timeStep = 50;\n  var state = generator.next(duration);\n  while (!state.done && duration < maxDuration) {\n    duration += timeStep;\n    state = generator.next(duration);\n  }\n  return duration;\n}\nfunction animateValue(_ref) {\n  var _ref$autoplay = _ref.autoplay,\n    autoplay = _ref$autoplay === void 0 ? true : _ref$autoplay,\n    _ref$delay = _ref.delay,\n    delay = _ref$delay === void 0 ? 0 : _ref$delay,\n    _ref$driver = _ref.driver,\n    driver = _ref$driver === void 0 ? frameloopDriver : _ref$driver,\n    keyframes$1 = _ref.keyframes,\n    _ref$type = _ref.type,\n    type = _ref$type === void 0 ? \"keyframes\" : _ref$type,\n    _ref$repeat = _ref.repeat,\n    repeat = _ref$repeat === void 0 ? 0 : _ref$repeat,\n    _ref$repeatDelay = _ref.repeatDelay,\n    repeatDelay = _ref$repeatDelay === void 0 ? 0 : _ref$repeatDelay,\n    _ref$repeatType = _ref.repeatType,\n    repeatType = _ref$repeatType === void 0 ? \"loop\" : _ref$repeatType,\n    onPlay = _ref.onPlay,\n    onStop = _ref.onStop,\n    onComplete = _ref.onComplete,\n    onUpdate = _ref.onUpdate,\n    options = _objectWithoutProperties(_ref, _excluded);\n  var resolveFinishedPromise;\n  var currentFinishedPromise;\n  /**\n   * Create a new finished Promise every time we enter the\n   * finished state and resolve the old Promise. This is\n   * WAAPI-compatible behaviour.\n   */\n  var updateFinishedPromise = function updateFinishedPromise() {\n    currentFinishedPromise = new Promise(function (resolve) {\n      resolveFinishedPromise = resolve;\n    });\n  };\n  // Create the first finished promise\n  updateFinishedPromise();\n  var animationDriver;\n  var generatorFactory = types[type] || keyframes;\n  /**\n   * If this isn't the keyframes generator and we've been provided\n   * strings as keyframes, we need to interpolate these.\n   * TODO: Support velocity for units and complex value types/\n   */\n  var mapNumbersToKeyframes;\n  if (generatorFactory !== keyframes && typeof keyframes$1[0] !== \"number\") {\n    mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {\n      clamp: false\n    });\n    keyframes$1 = [0, 100];\n  }\n  var generator = generatorFactory(_objectSpread(_objectSpread({}, options), {}, {\n    keyframes: keyframes$1\n  }));\n  var mirroredGenerator;\n  if (repeatType === \"mirror\") {\n    mirroredGenerator = generatorFactory(_objectSpread(_objectSpread({}, options), {}, {\n      keyframes: _toConsumableArray(keyframes$1).reverse(),\n      velocity: -(options.velocity || 0)\n    }));\n  }\n  var playState = \"idle\";\n  var holdTime = null;\n  var startTime = null;\n  /**\n   * If duration is undefined and we have repeat options,\n   * we need to calculate a duration from the generator.\n   *\n   * We set it to the generator itself to cache the duration.\n   * Any timeline resolver will need to have already precalculated\n   * the duration by this step.\n   */\n  if (generator.calculatedDuration === null && repeat) {\n    generator.calculatedDuration = calculateDuration(generator);\n  }\n  var calculatedDuration = generator.calculatedDuration;\n  var resolvedDuration = Infinity;\n  var totalDuration = Infinity;\n  if (calculatedDuration) {\n    resolvedDuration = calculatedDuration + repeatDelay;\n    totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n  }\n  var time = 0;\n  var tick = function tick(timestamp) {\n    if (startTime === null) return;\n    if (holdTime !== null) {\n      time = holdTime;\n    } else {\n      time = timestamp - startTime;\n    }\n    // Rebase on delay\n    time = Math.max(time - delay, 0);\n    /**\n     * If this animation has finished, set the current time\n     * to the total duration.\n     */\n    if (playState === \"finished\" && holdTime === null) {\n      time = totalDuration;\n    }\n    var elapsed = time;\n    var frameGenerator = generator;\n    if (repeat) {\n      /**\n       * Get the current progress (0-1) of the animation. If t is >\n       * than duration we'll get values like 2.5 (midway through the\n       * third iteration)\n       */\n      var progress = time / resolvedDuration;\n      /**\n       * Get the current iteration (0 indexed). For instance the floor of\n       * 2.5 is 2.\n       */\n      var currentIteration = Math.floor(progress);\n      /**\n       * Get the current progress of the iteration by taking the remainder\n       * so 2.5 is 0.5 through iteration 2\n       */\n      var iterationProgress = progress % 1.0;\n      /**\n       * If iteration progress is 1 we count that as the end\n       * of the previous iteration.\n       */\n      if (!iterationProgress && progress >= 1) {\n        iterationProgress = 1;\n      }\n      iterationProgress === 1 && currentIteration--;\n      /**\n       * Reverse progress if we're not running in \"normal\" direction\n       */\n      var iterationIsOdd = currentIteration % 2;\n      if (iterationIsOdd) {\n        if (repeatType === \"reverse\") {\n          iterationProgress = 1 - iterationProgress;\n          if (repeatDelay) {\n            iterationProgress -= repeatDelay / resolvedDuration;\n          }\n        } else if (repeatType === \"mirror\") {\n          frameGenerator = mirroredGenerator;\n        }\n      }\n      var p = time >= totalDuration ? repeatType === \"reverse\" && iterationIsOdd ? 0 : 1 : clamp(0, 1, iterationProgress);\n      elapsed = p * resolvedDuration;\n    }\n    var state = frameGenerator.next(elapsed);\n    var value = state.value,\n      done = state.done;\n    if (onUpdate) {\n      onUpdate(mapNumbersToKeyframes ? mapNumbersToKeyframes(value) : value);\n    }\n    if (calculatedDuration !== null) {\n      done = time >= totalDuration;\n    }\n    var isAnimationFinished = holdTime === null && (playState === \"finished\" || playState === \"running\" && done);\n    if (isAnimationFinished) {\n      finish();\n    }\n    return state;\n  };\n  var finish = function finish() {\n    animationDriver && animationDriver.stop();\n    playState = \"finished\";\n    onComplete && onComplete();\n    resolveFinishedPromise();\n    updateFinishedPromise();\n  };\n  var play = function play() {\n    if (!animationDriver) animationDriver = driver(tick);\n    var now = animationDriver.now();\n    onPlay && onPlay();\n    playState = \"running\";\n    if (holdTime !== null) {\n      startTime = now - holdTime;\n    } else if (!startTime) {\n      // TODO When implementing play/pause, check WAAPI\n      // logic around finished animations\n      startTime = now;\n    }\n    holdTime = null;\n    animationDriver.start();\n  };\n  if (autoplay) {\n    play();\n  }\n  var controls = {\n    then: function then(resolve, reject) {\n      return currentFinishedPromise.then(resolve, reject);\n    },\n    get time() {\n      return millisecondsToSeconds(time);\n    },\n    set time(newTime) {\n      var timeInMs = secondsToMilliseconds(newTime);\n      if (holdTime !== null || !animationDriver) {\n        holdTime = timeInMs;\n      } else {\n        startTime = animationDriver.now() - timeInMs;\n      }\n    },\n    play: play,\n    pause: function pause() {\n      playState = \"paused\";\n      holdTime = time;\n    },\n    stop: function stop() {\n      onStop && onStop();\n      animationDriver && animationDriver.stop();\n      animationDriver = undefined;\n    },\n    sample: function sample(elapsed) {\n      startTime = 0;\n      return tick(elapsed);\n    }\n  };\n  return controls;\n}\nexport { animateValue };","map":{"version":3,"names":["keyframes","spring","inertia","frameloopDriver","interpolate","clamp","millisecondsToSeconds","secondsToMilliseconds","types","decay","tween","maxDuration","calculateDuration","generator","duration","timeStep","state","next","done","animateValue","_ref","_ref$autoplay","autoplay","_ref$delay","delay","_ref$driver","driver","keyframes$1","_ref$type","type","_ref$repeat","repeat","_ref$repeatDelay","repeatDelay","_ref$repeatType","repeatType","onPlay","onStop","onComplete","onUpdate","options","_objectWithoutProperties","_excluded","resolveFinishedPromise","currentFinishedPromise","updateFinishedPromise","Promise","resolve","animationDriver","generatorFactory","mapNumbersToKeyframes","_objectSpread","mirroredGenerator","_toConsumableArray","reverse","velocity","playState","holdTime","startTime","calculatedDuration","resolvedDuration","Infinity","totalDuration","time","tick","timestamp","Math","max","elapsed","frameGenerator","progress","currentIteration","floor","iterationProgress","iterationIsOdd","p","value","isAnimationFinished","finish","stop","play","now","start","controls","then","reject","newTime","timeInMs","pause","undefined","sample"],"sources":["C:/Users/Nicolas/Desktop/UNIVERSIDAD/Proyectos Personales/ingeniero-eduard/node_modules/framer-motion/dist/es/animation/js/index.mjs"],"sourcesContent":["import { keyframes } from '../generators/keyframes.mjs';\nimport { spring } from '../generators/spring/index.mjs';\nimport { inertia } from '../generators/inertia.mjs';\nimport { frameloopDriver } from './driver-frameloop.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../utils/time-conversion.mjs';\n\nconst types = {\n    decay: inertia,\n    inertia,\n    tween: keyframes,\n    keyframes: keyframes,\n    spring,\n};\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nfunction calculateDuration(generator) {\n    let duration = 0;\n    const timeStep = 50;\n    let state = generator.next(duration);\n    while (!state.done && duration < maxDuration) {\n        duration += timeStep;\n        state = generator.next(duration);\n    }\n    return duration;\n}\nfunction animateValue({ autoplay = true, delay = 0, driver = frameloopDriver, keyframes: keyframes$1, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", onPlay, onStop, onComplete, onUpdate, ...options }) {\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Create a new finished Promise every time we enter the\n     * finished state and resolve the old Promise. This is\n     * WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let animationDriver;\n    const generatorFactory = types[type] || keyframes;\n    /**\n     * If this isn't the keyframes generator and we've been provided\n     * strings as keyframes, we need to interpolate these.\n     * TODO: Support velocity for units and complex value types/\n     */\n    let mapNumbersToKeyframes;\n    if (generatorFactory !== keyframes &&\n        typeof keyframes$1[0] !== \"number\") {\n        mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {\n            clamp: false,\n        });\n        keyframes$1 = [0, 100];\n    }\n    const generator = generatorFactory({ ...options, keyframes: keyframes$1 });\n    let mirroredGenerator;\n    if (repeatType === \"mirror\") {\n        mirroredGenerator = generatorFactory({\n            ...options,\n            keyframes: [...keyframes$1].reverse(),\n            velocity: -(options.velocity || 0),\n        });\n    }\n    let playState = \"idle\";\n    let holdTime = null;\n    let startTime = null;\n    /**\n     * If duration is undefined and we have repeat options,\n     * we need to calculate a duration from the generator.\n     *\n     * We set it to the generator itself to cache the duration.\n     * Any timeline resolver will need to have already precalculated\n     * the duration by this step.\n     */\n    if (generator.calculatedDuration === null && repeat) {\n        generator.calculatedDuration = calculateDuration(generator);\n    }\n    const { calculatedDuration } = generator;\n    let resolvedDuration = Infinity;\n    let totalDuration = Infinity;\n    if (calculatedDuration) {\n        resolvedDuration = calculatedDuration + repeatDelay;\n        totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n    }\n    let time = 0;\n    const tick = (timestamp) => {\n        if (startTime === null)\n            return;\n        if (holdTime !== null) {\n            time = holdTime;\n        }\n        else {\n            time = timestamp - startTime;\n        }\n        // Rebase on delay\n        time = Math.max(time - delay, 0);\n        /**\n         * If this animation has finished, set the current time\n         * to the total duration.\n         */\n        if (playState === \"finished\" && holdTime === null) {\n            time = totalDuration;\n        }\n        let elapsed = time;\n        let frameGenerator = generator;\n        if (repeat) {\n            /**\n             * Get the current progress (0-1) of the animation. If t is >\n             * than duration we'll get values like 2.5 (midway through the\n             * third iteration)\n             */\n            const progress = time / resolvedDuration;\n            /**\n             * Get the current iteration (0 indexed). For instance the floor of\n             * 2.5 is 2.\n             */\n            let currentIteration = Math.floor(progress);\n            /**\n             * Get the current progress of the iteration by taking the remainder\n             * so 2.5 is 0.5 through iteration 2\n             */\n            let iterationProgress = progress % 1.0;\n            /**\n             * If iteration progress is 1 we count that as the end\n             * of the previous iteration.\n             */\n            if (!iterationProgress && progress >= 1) {\n                iterationProgress = 1;\n            }\n            iterationProgress === 1 && currentIteration--;\n            /**\n             * Reverse progress if we're not running in \"normal\" direction\n             */\n            const iterationIsOdd = currentIteration % 2;\n            if (iterationIsOdd) {\n                if (repeatType === \"reverse\") {\n                    iterationProgress = 1 - iterationProgress;\n                    if (repeatDelay) {\n                        iterationProgress -= repeatDelay / resolvedDuration;\n                    }\n                }\n                else if (repeatType === \"mirror\") {\n                    frameGenerator = mirroredGenerator;\n                }\n            }\n            const p = time >= totalDuration\n                ? repeatType === \"reverse\" && iterationIsOdd\n                    ? 0\n                    : 1\n                : clamp(0, 1, iterationProgress);\n            elapsed = p * resolvedDuration;\n        }\n        const state = frameGenerator.next(elapsed);\n        let { value, done } = state;\n        if (onUpdate) {\n            onUpdate(mapNumbersToKeyframes ? mapNumbersToKeyframes(value) : value);\n        }\n        if (calculatedDuration !== null) {\n            done = time >= totalDuration;\n        }\n        const isAnimationFinished = holdTime === null &&\n            (playState === \"finished\" || (playState === \"running\" && done));\n        if (isAnimationFinished) {\n            finish();\n        }\n        return state;\n    };\n    const finish = () => {\n        animationDriver && animationDriver.stop();\n        playState = \"finished\";\n        onComplete && onComplete();\n        resolveFinishedPromise();\n        updateFinishedPromise();\n    };\n    const play = () => {\n        if (!animationDriver)\n            animationDriver = driver(tick);\n        const now = animationDriver.now();\n        onPlay && onPlay();\n        playState = \"running\";\n        if (holdTime !== null) {\n            startTime = now - holdTime;\n        }\n        else if (!startTime) {\n            // TODO When implementing play/pause, check WAAPI\n            // logic around finished animations\n            startTime = now;\n        }\n        holdTime = null;\n        animationDriver.start();\n    };\n    if (autoplay) {\n        play();\n    }\n    const controls = {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        get time() {\n            return millisecondsToSeconds(time);\n        },\n        set time(newTime) {\n            const timeInMs = secondsToMilliseconds(newTime);\n            if (holdTime !== null || !animationDriver) {\n                holdTime = timeInMs;\n            }\n            else {\n                startTime = animationDriver.now() - timeInMs;\n            }\n        },\n        play,\n        pause: () => {\n            playState = \"paused\";\n            holdTime = time;\n        },\n        stop: () => {\n            onStop && onStop();\n            animationDriver && animationDriver.stop();\n            animationDriver = undefined;\n        },\n        sample: (elapsed) => {\n            startTime = 0;\n            return tick(elapsed);\n        },\n    };\n    return controls;\n}\n\nexport { animateValue };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}